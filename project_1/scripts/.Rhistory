library(tidyverse)
library(mclust)
# Load UMD data and Select variables that is useful
umd_df = read.csv('./bios611-projects-fall-2019-Jianqiao-Wang/project_1/data/UMD_Services_Provided_20190719.tsv', sep = '\t', header = TRUE)
getwd()
# Load UMD data and Select variables that is useful
umd_df = read.csv('Documents/GitHub/bios611-projects-fall-2019-Jianqiao-Wang/project_1/data/UMD_Services_Provided_20190719.tsv', sep = '\t', header = TRUE)
getwd()
library(tidyverse)
library(mclust)
# Load UMD data and Select variables that is useful
umd_df = read.csv('Documents/GitHub/bios611-projects-fall-2019-Jianqiao-Wang/project_1/data/UMD_Services_Provided_20190719.tsv', sep = '\t', header = TRUE)
# Load UMD data and Select variables that is useful
umd_df = read.csv('~/Documents/GitHub/bios611-projects-fall-2019-Jianqiao-Wang/project_1/data/UMD_Services_Provided_20190719.tsv', sep = '\t', header = TRUE)
umd_df = select(umd_df, c(Date, Food.Provided.for, Food.Pounds))
# Formulate Date with as.Date
umd_df$Date = as.Date(umd_df$Date, "%m/%d/%Y")
# Remove rows with missing data and Sort data by Date
umd_df = umd_df %>%
filter(Food.Provided.for > 0, Food.Pounds >= 0) %>%
arrange(Date) %>%
mutate(year=year(Date))
library(lubridate)
# Remove rows with missing data and Sort data by Date
umd_df = umd_df %>%
filter(Food.Provided.for > 0, Food.Pounds >= 0) %>%
arrange(Date) %>%
mutate(year=year(Date))
View(umd_df)
# Plot the data points to see which data should be removed
ggplot(umd_df, aes(Food.Provided.for, Food.Pounds)) +
geom_point(size=0.5) +
labs(x='Number of People Provided for', y='Food Pounds')
ggplot(umd_df, aes(Date, Food.Provided.for)) +
geom_point(size=0.5) +
labs(x='Time', y='Number of People Provided for')
ggplot(umd_df, aes(Date, Food.Pounds)) +
geom_point(size=0.5) +
labs(x='Time', y='Food Pounds')
# Remove outliers and unreasonable data
umd_df = umd_df %>%
filter(Food.Pounds < 100, Food.Provided.for < 60) %>%
filter(Date < as.Date('2019-09-24'), Date > as.Date('2000-01-01'))
# Plot: Total Food Pound in one day ~ Date
total_food_pound = aggregate(Food.Pounds~Date, umd_df, sum)
ggplot(total_food_pound, aes(x=Date, y=Food.Pounds)) +
geom_point(size=0.1) +
labs(x='Time', y='Food Pounds') +
geom_smooth()
# Plot: Number of People that UMD Provided food for in one day ~ Date
total_food_provided_for = aggregate(Food.Provided.for~Date, umd_df, sum)
ggplot(total_food_provided_for, aes(x=Date, y=Food.Provided.for)) +
geom_point(size=0.1) +
labs(x='Time', y='Food Provided for') +
geom_smooth()
# Plot: Total Food Pound in one day ~ Number of People that UMD Provided food for in one day
ggplot(umd_df, aes(Food.Provided.for, Food.Pounds)) +
geom_point(size=0.5) +
labs(x='Number of People', y='Food Pounds')
# Plot: Total Food Pound in one day ~ Number of People that UMD Provided food for in one day
ggplot(umd_df, aes(Food.Provided.for, Food.Pounds, color=year)) +
geom_point(size=0.5) +
labs(x='Number of People', y='Food Pounds')
# Plot: Total Food Pound in one day ~ Number of People that UMD Provided food for in one day
ggplot(umd_df, aes(Food.Provided.for, Food.Pounds, color=year)) +
geom_point(size=1) +
labs(x='Number of People', y='Food Pounds')
ggplot(total_food_provided_for, aes(x=Date, y=Food.Provided.for)) +
geom_point(size=0.1) +
labs(x='Time', y='Food Provided for') +
geom_smooth()
ggplot(total_food_provided_for, aes(x=Date, y=Food.Provided.for)) +
geom_point(size=0.5) +
labs(x='Time', y='Food Provided for') +
geom_smooth()
ggplot(total_food_provided_for, aes(x=Date, y=Food.Provided.for)) +
geom_point(size=0.2) +
labs(x='Time', y='Food Provided for') +
geom_smooth()
# Remove rows with missing data and Sort data by Date
umd_df = umd_df %>%
filter(Food.Provided.for > 0, Food.Pounds >= 0) %>%
arrange(Date) %>%
mutate(year=year(Date)) %>%
mutate(month=month(Date))
# Plot: Total Food Pound in one day ~ Number of People that UMD Provided food for in one day
ggplot(umd_df, aes(Food.Provided.for, Food.Pounds, color=month)) +
geom_point(size=1) +
labs(x='Number of People', y='Food Pounds')
ggplot(umd_df, aes(Food.Provided.for, Food.Pounds)) +
geom_point(size=0.5) +
labs(x='Number of People Provided for', y='Food Pounds')
ggplot(umd_df, aes(Date, Food.Provided.for)) +
geom_point(size=0.5) +
labs(x='Time', y='Number of People Provided for')
ggplot(umd_df, aes(Date, Food.Pounds)) +
geom_point(size=0.5) +
labs(x='Time', y='Food Pounds')
ggplot(umd_df, aes(Food.Provided.for, Food.Pounds)) +
geom_point(size=0.5) +
labs(x='Number of People Provided for', y='Food Pounds')
ggplot(umd_df, aes(Date, Food.Provided.for)) +
geom_point(size=0.5) +
labs(x='Time', y='Number of People Provided for')
ggplot(umd_df, aes(Date, Food.Pounds)) +
geom_point(size=0.5) +
labs(x='Time', y='Food Pounds')
library(tidyverse)
library(mclust)
library(lubridate)
umd_df = read.csv('~/Documents/GitHub/bios611-projects-fall-2019-Jianqiao-Wang/project_1/data/UMD_Services_Provided_20190719.tsv', sep = '\t', header = TRUE)
description = read.csv('~/Documents/GitHub/bios611-projects-fall-2019-Jianqiao-Wang/project_1/data/UMD_Services_Provided_20190719.tsv', sep = '\t', header = TRUE)
umd_df = select(umd_df, c(Date, Food.Provided.for, Food.Pounds))
umd_df$Date = as.Date(umd_df$Date, "%m/%d/%Y")
umd_df = umd_df %>%
filter(Food.Provided.for > 0, Food.Pounds >= 0) %>%
arrange(Date) %>%
mutate(year=year(Date))
ggplot(umd_df, aes(Food.Provided.for, Food.Pounds)) +
geom_point(size=0.5) +
labs(x='Number of People Provided for', y='Food Pounds')
ggplot(umd_df, aes(Date, Food.Provided.for)) +
geom_point(size=0.5) +
labs(x='Time', y='Number of People Provided for')
ggplot(umd_df, aes(Date, Food.Pounds)) +
geom_point(size=0.5) +
labs(x='Time', y='Food Pounds')
ggplot(umd_df, aes(Food.Provided.for, Food.Pounds)) +
geom_point(size=0.5) +
labs(x='Number of People Provided for', y='Food Pounds', title='Food Pounds by Number of People')
ggplot(umd_df, aes(Date, Food.Provided.for)) +
geom_point(size=0.5) +
labs(x='Time', y='Number of People Provided for', title='Number of People over Time')
ggplot(umd_df, aes(Date, Food.Pounds)) +
geom_point(size=0.5) +
labs(x='Time', y='Food Pounds', title='Food Pounds over Time')
ggplot(umd_df, aes(Food.Provided.for, Food.Pounds)) +
geom_point(size=0.5) +
labs(x='Number of People Every Day', y='Total Food Pounds Every Day', title='Total Food Pounds Every Day by Number of People Every Day')
ggplot(umd_df, aes(Date, Food.Provided.for)) +
geom_point(size=0.5) +
labs(x='Time', y='Number of Every Day', title='Number of People Every Day over Time')
ggplot(umd_df, aes(Date, Food.Pounds)) +
geom_point(size=0.5) +
labs(x='Time', y='Total Food Pounds Every Day', title='Total Food Pounds Every Day over Time')
ggplot(umd_df, aes(Food.Provided.for, Food.Pounds)) +
geom_point(size=0.5) +
labs(x='Number of People Every Day', y='Total Food Pounds Every Day', title='Total Food Pounds Every Day by Number of People Every Day') +
theme(plot.title = element_text(hjust = 0.5))
ggplot(umd_df, aes(Date, Food.Provided.for)) +
geom_point(size=0.5) +
labs(x='Time', y='Number of Every Day', title='Number of People Every Day over Time') +
theme(plot.title = element_text(hjust = 0.5))
ggplot(umd_df, aes(Date, Food.Pounds)) +
geom_point(size=0.5) +
labs(x='Time', y='Total Food Pounds Every Day', title='Total Food Pounds Every Day over Time') +
theme(plot.title = element_text(hjust = 0.5))
library(tidyverse)
library(mclust)
library(lubridate)
# ---Data Preprocessing---
# Load UMD data
# Select Date, Food.Provided.for and Food.Pounds columns.
umd_df = read.csv('~/Documents/GitHub/bios611-projects-fall-2019-Jianqiao-Wang/project_1/data/UMD_Services_Provided_20190719.tsv', sep = '\t', header = TRUE)
umd_df = select(umd_df, c(Date, Food.Provided.for, Food.Pounds))
# Formulate Date columns with as.Date
umd_df$Date = as.Date(umd_df$Date, "%m/%d/%Y")
# Remove rows with missing data
# Sort data by Date
umd_df = umd_df %>%
drop_na() %>%
arrange(Date) %>%
mutate(year=year(Date)) # extract year from Date variable
# Plot the data points to see which data (outliers) should be removed
# Food.Pounds ~ Food.Provided.for
ggplot(umd_df, aes(Food.Provided.for, Food.Pounds)) +
geom_point(size=3) +
labs(x='Number of People Provided for',
y='Food Pounds') +
theme(axis.title=element_text(size=24),
axis.text=element_text(size=20, face='bold')) +
ggsave('food_people.png',
path = '~/Desktop/Project_1_slides/',)
# Food.Provided.for ~ Date
ggplot(umd_df, aes(Date, Food.Provided.for)) +
geom_point(size=3) +
labs(x='Time',
y='Number of People Provided for') +
theme(axis.title=element_text(size=24),
axis.text=element_text(size=20, face='bold')) +
ggsave('people_date.png',
path = '~/Desktop/Project_1_slides/',)
# Food.Pounds ~ Date
ggplot(umd_df, aes(Date, Food.Pounds)) +
geom_point(size=3) +
labs(x='Time',
y='Food Pounds') +
theme(axis.title=element_text(size=24),
axis.text=element_text(size=20, face='bold')) +
ggsave('food_time.png',
path = '~/Desktop/Project_1_slides/',)
# Remove outliers and data points after 2020
umd_df = umd_df %>%
filter(Food.Pounds < 100, Food.Provided.for < 60) %>%
filter(Date < as.Date('2019-09-24'), Date > as.Date('2000-01-01'))
# ---Food Plots over Time---
# Figure 1: Number of People that UMD provided food for Every Day over Time
total_food_provided_for = aggregate(Food.Provided.for~Date, umd_df, sum)
ggplot(total_food_provided_for, aes(x=Date, y=Food.Provided.for)) +
geom_point(size=0.2) +
labs(x='Time',
y='Number of People Receiving Food Every Day',
title='Number of People over Time') +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.title=element_text(size=30),
title =element_text(size=20),
axis.text=element_text(size=18, face='bold')) +
geom_smooth() +
ggsave('peopleovertime.png',
path = '~/Desktop/Project_1_slides/',)
# Figure 2: Total Food Pounds UMD provided Every Day over Time
total_food_pound = aggregate(Food.Pounds~Date, umd_df, sum)
ggplot(total_food_pound, aes(x=Date, y=Food.Pounds)) +
geom_point(size=0.2) +
labs(x='Time',
y='Total Food Pounds Every Day',
title='Total Food Pounds Every Day over Time') +
theme(plot.title=element_text(hjust=0.5)) +
theme(axis.title=element_text(size=30),
title =element_text(size=20),
axis.text=element_text(size=18, face='bold')) +
geom_smooth() +
ggsave('foodovertime.png',
path = '~/Desktop/Project_1_slides/',)
# ---Average Food Pounds per person---
# Figure 3: Average Food Pounds per person
ggplot(umd_df, aes(Food.Provided.for, Food.Pounds, color=year)) +
geom_point(size = 2.5) +
labs(x='Number of People',
y='Food Pounds',
title='Food Pounds by Number of People Receiving Food') +
theme_minimal() +
theme(plot.title=element_text(hjust=0.5)) +
theme(axis.title=element_text(size=24), title =element_text(size=20)) +
ggsave('average.png',
path = '~/Desktop/Project_1_slides/',)
# Fit EM clustering algorithm
# Divide data points into 2 clusters by Food.Provided.for and Food.Pounds
fit = umd_df %>%
select(c(Food.Provided.for, Food.Pounds)) %>%
Mclust(G=2)
# Assign each data points with estimated cluster
umd_df$cluster = as.factor(fit$classification)
umd_df$uncertainty = fit$uncertainty
# Figure 4: Average Food Pounds per person colored by cluster
ggplot(umd_df, aes(x=Food.Provided.for, y=Food.Pounds, color=cluster, group=cluster)) +
geom_point(size=2.5) +
geom_smooth(method='lm', se=FALSE, formula=y~x-1) +
labs(x='Number of People',
y='Food Pounds',
title='Food Pounds by Number of People Receiving Food') +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.title=element_text(size=24), title =element_text(size=20)) +
scale_color_discrete('Group') +
ggsave('average_em.png',
path = '~/Desktop/Project_1_slides/',)
library(tidyverse)
library(mclust)
library(lubridate)
set.seed(0)
# ---Data Preprocessing---
# Load UMD data
# Select Date, Food.Provided.for and Food.Pounds columns.
umd_df = read.csv('~/Documents/GitHub/bios611-projects-fall-2019-Jianqiao-Wang/project_1/data/UMD_Services_Provided_20190719.tsv', sep = '\t', header = TRUE)
umd_df = select(umd_df, c(Date, Food.Provided.for, Food.Pounds))
# Formulate Date columns with as.Date
umd_df$Date = as.Date(umd_df$Date, "%m/%d/%Y")
# Remove rows with missing data
# Sort data by Date
umd_df = umd_df %>%
drop_na() %>%
arrange(Date) %>%
mutate(year=year(Date)) # extract year from Date variable
# Plot the data points to see which data (outliers) should be removed
# Food.Pounds ~ Food.Provided.for
ggplot(umd_df, aes(Food.Provided.for, Food.Pounds)) +
geom_point(size=3) +
labs(x='Number of People Provided for',
y='Food Pounds') +
theme(axis.title=element_text(size=24),
axis.text=element_text(size=20, face='bold')) +
ggsave('food_people.png',
path = '~/Desktop/Project_1_slides/',)
# Food.Provided.for ~ Date
ggplot(umd_df, aes(Date, Food.Provided.for)) +
geom_point(size=3) +
labs(x='Time',
y='Number of People Provided for') +
theme(axis.title=element_text(size=24),
axis.text=element_text(size=20, face='bold')) +
ggsave('people_date.png',
path = '~/Desktop/Project_1_slides/',)
# Food.Pounds ~ Date
ggplot(umd_df, aes(Date, Food.Pounds)) +
geom_point(size=3) +
labs(x='Time',
y='Food Pounds') +
theme(axis.title=element_text(size=24),
axis.text=element_text(size=20, face='bold')) +
ggsave('food_time.png',
path = '~/Desktop/Project_1_slides/',)
# Plot the data points to see which data (outliers) should be removed
# Food.Pounds ~ Food.Provided.for
ggplot(umd_df, aes(Food.Provided.for, Food.Pounds)) +
geom_point(size=3) +
labs(x='Number of People Provided for',
y='Food Pounds') +
theme(axis.title=element_text(size=24),
axis.text=element_text(size=20, face='bold')) +
ggsave('food_people.png',
path = '~/Desktop/Project_1_slides/',)
