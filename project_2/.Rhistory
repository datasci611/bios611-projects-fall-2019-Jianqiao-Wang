association("Number of People Receiving Food", "Food Pounds")
umd_df["Number of People Receiving Food"]
c(umd_df["Number of People Receiving Food"])
outliers(c(umd_df["Number of People Receiving Food"]))
quantile(umd_df["Number of People Receving Food"])
quantile(umd_df$`Number of People Receving Food`)
association_df = umd_df %>%
select(matches(variable_x), matches(variable_y)) %>%
drop_na()
association_df = umd_df %>%
+     select(matches("Number of People Receving Food"), matches("Food Pounds")) %>%
+     drop_na()
association_df = umd_df %>%
select(`Number of People Receiving Food`, `Food Pounds`) %>%
drop_na()
quantile(association_df$`Number of People Receiving Food`)
quantile(association_df$`Number of People Receiving Food`)
matches("x")
quantile(association_df["Number of People Receiving Food"])
quantile(c(association_df["Number of People Receiving Food"]))
c(association_df["Number of People Receiving Food"])
?quantile
x=c(association_df["Number of People Receiving Food"])
quantile(x)
association_df$matches("Number of People Receiving Food")
c(seq(1, 100))
quantile(c(seq(1, 100)))
x=c(association_df["Number of People Receiving Food"])
as.vector(association_df["Number of People Receiving Food"])
x=as.vector(association_df["Number of People Receiving Food"])
View(x)
# ---Average Food Pounds per person---
# Figure 3: Average Food Pounds per person
association <- function(variable_x, variable_y){
association_df = umd_df %>%
select(matches(variable_x), matches(variable_y)) %>%
drop_na()
outlier_x = outliers(as.vector(association_df[variable_x]))
outlier_y = outliers(as.vector(association_df[variable_y]))
association_df = association_df %>%
filter(matches(variable_x) < outlier_x[1], matches(variable_x) > outlier_x[2]) %>%
filter(matches(variable_y) < outlier_y[1], matches(variable_y) > outlier_y[2])
p <- ggplot(association_df, aes(x=get(variable_x), y=get(variable_y))) +
geom_point(size=2.5)
return(p)
}
association("Number of People Receiving Food", "Food Pounds")
# ---Average Food Pounds per person---
# Figure 3: Average Food Pounds per person
association <- function(variable_x, variable_y){
association_df = umd_df %>%
select(matches(variable_x), matches(variable_y)) %>%
drop_na()
outlier_x = outliers(as.vector(association_df[variable_x]))
print(1)
outlier_y = outliers(as.vector(association_df[variable_y]))
association_df = association_df %>%
filter(matches(variable_x) < outlier_x[1], matches(variable_x) > outlier_x[2]) %>%
filter(matches(variable_y) < outlier_y[1], matches(variable_y) > outlier_y[2])
p <- ggplot(association_df, aes(x=get(variable_x), y=get(variable_y))) +
geom_point(size=2.5)
return(p)
}
association("Number of People Receiving Food", "Food Pounds")
# ---Average Food Pounds per person---
# Figure 3: Average Food Pounds per person
association <- function(variable_x, variable_y){
association_df = umd_df %>%
select(matches(variable_x), matches(variable_y)) %>%
drop_na()
print(1)
outlier_x = outliers(as.vector(association_df[variable_x]))
outlier_y = outliers(as.vector(association_df[variable_y]))
association_df = association_df %>%
filter(matches(variable_x) < outlier_x[1], matches(variable_x) > outlier_x[2]) %>%
filter(matches(variable_y) < outlier_y[1], matches(variable_y) > outlier_y[2])
p <- ggplot(association_df, aes(x=get(variable_x), y=get(variable_y))) +
geom_point(size=2.5)
return(p)
}
association("Number of People Receiving Food", "Food Pounds")
quantile(as.vector(association_df["Number of People Receiving Food"]))
unlist(association_df["Number of People Receiving Food"])
x=unlist(association_df["Number of People Receiving Food"])
x=as.vector(association_df["Number of People Receiving Food"])
x[0]
c(x)
x=c(x)
x=as.vector(association_df["Number of People Receiving Food"])
x=as.matrix(association_df["Number of People Receiving Food"])
x=as.numeric(association_df["Number of People Receiving Food"])
x=as.vector(association_df["Number of People Receiving Food"])
x[1]
x[2]
x[1]
quantile(x)
quantile(x[1])
quantile(x$`Number of People Receiving Food`)
vector()
vector(x)
x=vector(association_df["Number of People Receiving Food"])
association_df
names(association_df)
association_df = umd_df %>%
select(`Food Pounds`, `Number of People Receiving Food`) %>%
drop_na()
names(association_df)
# ---Average Food Pounds per person---
# Figure 3: Average Food Pounds per person
association <- function(variable_x, variable_y){
association_df = umd_df %>%
select(matches(variable_x), matches(variable_y)) %>%
drop_na()
names(association_df) = c('x', 'y')
outlier_x = outliers(association_df$x)
outlier_y = outliers(association_df$y)
association_df = association_df %>%
filter(matches(variable_x) < outlier_x[1], matches(variable_x) > outlier_x[2]) %>%
filter(matches(variable_y) < outlier_y[1], matches(variable_y) > outlier_y[2])
p <- ggplot(association_df, aes(x=x, y=y)) +
geom_point(size=2.5)
return(p)
}
association("Number of People Receiving Food", "Food Pounds")
# ---Average Food Pounds per person---
# Figure 3: Average Food Pounds per person
association <- function(variable_x, variable_y){
association_df = umd_df %>%
select(matches(variable_x), matches(variable_y)) %>%
drop_na()
names(association_df) = c('x', 'y')
print(1)
outlier_x = outliers(association_df$x)
outlier_y = outliers(association_df$y)
association_df = association_df %>%
filter(matches(variable_x) < outlier_x[1], matches(variable_x) > outlier_x[2]) %>%
filter(matches(variable_y) < outlier_y[1], matches(variable_y) > outlier_y[2])
p <- ggplot(association_df, aes(x=x, y=y)) +
geom_point(size=2.5)
return(p)
}
association("Number of People Receiving Food", "Food Pounds")
# ---Average Food Pounds per person---
# Figure 3: Average Food Pounds per person
association <- function(variable_x, variable_y){
association_df = umd_df %>%
select(matches(variable_x), matches(variable_y)) %>%
drop_na()
names(association_df) = c('x', 'y')
outlier_x = outliers(association_df$x)
outlier_y = outliers(association_df$y)
names(association_df) = c(variable_x, variable_y)
association_df = association_df %>%
filter(matches(variable_x) < outlier_x[1], matches(variable_x) > outlier_x[2]) %>%
filter(matches(variable_y) < outlier_y[1], matches(variable_y) > outlier_y[2])
p <- ggplot(association_df, aes(x=get(variable_x), y=get(variable_y))) +
geom_point(size=2.5)
return(p)
}
association("Number of People Receiving Food", "Food Pounds")
r
r
# ---Average Food Pounds per person---
# Figure 3: Average Food Pounds per person
association <- function(variable_x, variable_y){
association_df = umd_df %>%
select(matches(variable_x), matches(variable_y)) %>%
drop_na()
names(association_df) = c('x', 'y')
outlier_x = outliers(association_df$x)
print(1)
outlier_y = outliers(association_df$y)
names(association_df) = c(variable_x, variable_y)
association_df = association_df %>%
filter(matches(variable_x) < outlier_x[1], matches(variable_x) > outlier_x[2]) %>%
filter(matches(variable_y) < outlier_y[1], matches(variable_y) > outlier_y[2])
p <- ggplot(association_df, aes(x=get(variable_x), y=get(variable_y))) +
geom_point(size=2.5)
return(p)
}
association("Number of People Receiving Food", "Food Pounds")
# ---Average Food Pounds per person---
# Figure 3: Average Food Pounds per person
association <- function(variable_x, variable_y){
association_df = umd_df %>%
select(matches(variable_x), matches(variable_y)) %>%
drop_na()
names(association_df) = c('x', 'y')
outlier_x = outliers(association_df$x)
outlier_y = outliers(association_df$y)
names(association_df) = c(variable_x, variable_y)
print(1)
association_df = association_df %>%
filter(matches(variable_x) < outlier_x[1], matches(variable_x) > outlier_x[2]) %>%
filter(matches(variable_y) < outlier_y[1], matches(variable_y) > outlier_y[2])
p <- ggplot(association_df, aes(x=get(variable_x), y=get(variable_y))) +
geom_point(size=2.5)
return(p)
}
association("Number of People Receiving Food", "Food Pounds")
association("Number of People Receiving Food", "Food Pounds")
# ---Average Food Pounds per person---
# Figure 3: Average Food Pounds per person
association <- function(variable_x, variable_y){
association_df = umd_df %>%
select(matches(variable_x), matches(variable_y)) %>%
drop_na()
names(association_df) = c('x', 'y')
outlier_x = outliers(association_df$x)
outlier_y = outliers(association_df$y)
names(association_df) = c(variable_x, variable_y)
association_df = association_df %>%
filter(matches(variable_x) < outlier_x[1], matches(variable_x) > outlier_x[2]) %>%
filter(matches(variable_y) < outlier_y[1], matches(variable_y) > outlier_y[2])
print(1)
p <- ggplot(association_df, aes(x=get(variable_x), y=get(variable_y))) +
geom_point(size=2.5)
return(p)
}
association("Number of People Receiving Food", "Food Pounds")
# ---Average Food Pounds per person---
# Figure 3: Average Food Pounds per person
association <- function(variable_x, variable_y){
association_df = umd_df %>%
select(matches(variable_x), matches(variable_y)) %>%
drop_na()
names(association_df) = c('x', 'y')
outlier_x = outliers(association_df$x)
outlier_y = outliers(association_df$y)
association_df = association_df %>%
filter(x < outlier_x[1], x > outlier_x[2]) %>%
filter(y < outlier_y[1], y > outlier_y[2])
names(association_df) = c(variable_x, variable_y)
p <- ggplot(association_df, aes(x=get(variable_x), y=get(variable_y))) +
geom_point(size=2.5)
return(p)
}
association("Number of People Receiving Food", "Food Pounds")
library(shiny)
source('helper_functions.R')
setwd('~/Documents/GitHub/bios611-projects-fall-2019-Jianqiao-Wang/project_2/')
source('helper_functions.R')
runApp()
runApp()
?selectInput
runApp()
runApp()
?menuItem
runApp()
runApp()
runApp()
runApp()
runApp()
# ---Question 2: Average Food Pounds per person---
food_data = umd_df %>%
select(`Number of People Receiving Food`, `Food Pounds`) %>%
drop_na() %>%
filter(`Food Pounds` < 100, `Number of People Receiving Food` < 60)
average_food <- ggplot(food_data, aes(`Number of People Receiving Food`, `Food Pounds`, color=year)) +
geom_point(size = 2.5) +
labs(x='Number of People',
y='Food Pounds',
title='Food Pounds by Number of People Receiving Food') +
theme_minimal() +
theme(plot.title=element_text(hjust=0.5)) +
theme(axis.title=element_text(size=24), title =element_text(size=20))
average_food
average_food <- ggplot(food_data, aes(`Number of People Receiving Food`, `Food Pounds`)) +
geom_point(size = 2.5) +
labs(x='Number of People',
y='Food Pounds',
title='Food Pounds by Number of People Receiving Food') +
theme_minimal() +
theme(plot.title=element_text(hjust=0.5)) +
theme(axis.title=element_text(size=24), title =element_text(size=20))
average_food
set.seed(0)
# ---Question 2: Average Food Pounds per person---
food_data = umd_df %>%
select(`Number of People Receiving Food`, `Food Pounds`) %>%
drop_na() %>%
filter(`Food Pounds` < 100, `Number of People Receiving Food` < 60)
# Fit EM clustering algorithm
# Divide data points into 2 clusters by Food.Provided.for and Food.Pounds
fit = food_data %>%
Mclust(G=2)
# Assign each data points with estimated cluster
food_data$group = as.factor(fit$classification)
food_data$uncertainty = fit$uncertainty
# Figure 4: Average Food Pounds per person colored by cluster
average_food <- ggplot(food_data, aes(x=`Number of People Receiving Food`, y=`Food Pounds`, color=group, group=group)) +
geom_point(size=1.5) +
geom_smooth(method='lm', se=FALSE, formula=y~x-1) +
labs(x='Number of People Receiving Food',
y='Food Pounds',
title='Food Pounds against Number of People Receiving Food') +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
average_food
set.seed(1)
# Fit EM clustering algorithm
# Divide data points into 2 clusters by Food.Provided.for and Food.Pounds
fit = food_data %>%
Mclust(G=2)
# Assign each data points with estimated cluster
food_data$group = as.factor(fit$classification)
food_data$uncertainty = fit$uncertainty
# Figure 4: Average Food Pounds per person colored by cluster
average_food <- ggplot(food_data, aes(x=`Number of People Receiving Food`, y=`Food Pounds`, color=group, group=group)) +
geom_point(size=1.5) +
geom_smooth(method='lm', se=FALSE, formula=y~x-1) +
labs(x='Number of People Receiving Food',
y='Food Pounds',
title='Food Pounds against Number of People Receiving Food') +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
average_food
set.seed(222)
# ---Question 2: Average Food Pounds per person---
food_data = umd_df %>%
select(`Number of People Receiving Food`, `Food Pounds`) %>%
drop_na() %>%
filter(`Food Pounds` < 100, `Number of People Receiving Food` < 60)
# Fit EM clustering algorithm
# Divide data points into 2 clusters by Food.Provided.for and Food.Pounds
fit = food_data %>%
Mclust(G=2)
# Assign each data points with estimated cluster
food_data$Group = as.factor(fit$classification)
food_data$uncertainty = fit$uncertainty
# Figure 4: Average Food Pounds per person colored by cluster
average_food <- ggplot(food_data, aes(x=`Number of People Receiving Food`, y=`Food Pounds`, color=Group, group=Group)) +
geom_point(size=1.5) +
geom_smooth(method='lm', se=FALSE, formula=y~x-1) +
labs(x='Number of People Receiving Food',
y='Food Pounds',
title='Food Pounds against Number of People Receiving Food') +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
average_food
set.seed(435)
# ---Question 2: Average Food Pounds per person---
food_data = umd_df %>%
select(`Number of People Receiving Food`, `Food Pounds`) %>%
drop_na() %>%
filter(`Food Pounds` < 100, `Number of People Receiving Food` < 60)
# Fit EM clustering algorithm
# Divide data points into 2 clusters by Food.Provided.for and Food.Pounds
fit = food_data %>%
Mclust(G=2)
# Assign each data points with estimated cluster
food_data$Group = as.factor(fit$classification)
food_data$uncertainty = fit$uncertainty
# Figure 4: Average Food Pounds per person colored by cluster
average_food <- ggplot(food_data, aes(x=`Number of People Receiving Food`, y=`Food Pounds`, color=Group, group=Group)) +
geom_point(size=1.5) +
geom_smooth(method='lm', se=FALSE, formula=y~x-1) +
labs(x='Number of People Receiving Food',
y='Food Pounds',
title='Food Pounds against Number of People Receiving Food') +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
average_food
runApp()
# ---Question 2: Average Food Pounds per person---
food_data = umd_df %>%
select(`Number of People Receiving Food`, `Food Pounds`) %>%
drop_na() %>%
filter(`Food Pounds` < 100, `Number of People Receiving Food` < 60)
# Fit EM clustering algorithm
# Divide data points into 2 clusters by Food.Provided.for and Food.Pounds
set.seed(445)
fit = food_data %>%
Mclust(G=2)
# Assign each data points with estimated cluster
food_data$Group = as.factor(fit$classification)
food_data$uncertainty = fit$uncertainty
# Figure 4: Average Food Pounds per person colored by cluster
average_food <- ggplot(food_data, aes(x=`Number of People Receiving Food`, y=`Food Pounds`, color=Group, group=Group)) +
geom_point(size=1.5) +
geom_smooth(method='lm', se=FALSE, formula=y~x-1) +
labs(x='Number of People Receiving Food',
y='Food Pounds',
title='Food Pounds against Number of People Receiving Food') +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
average_food
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
round(3.1231234, 2)
round(3.1231234, 4)
round(3.1278234, 4)
round(3.1278234, 3)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
print("1, 2, \n 4")
paste("1, 2, 3", "\n", "3")
cat
cat("1, 2, 3", "\n", "3")
cat("1, 2, \n 4")
runApp()
runApp()
runApp()
runApp()
paste('1', '2', sep = "\n")
?paste
paste('1', '2', collapse = \n"")
paste('1', '2', collapse = "\n")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
print('1\n2')
print('1\\2')
paste('1', '2', collapse = "\n")
paste('1', '2', collapse = "\\")
paste('1', '2', collapse = "\\\\\\")
paste('1', '2', collapse = "\r")
paste('1', '2', collapse = "\r\n")
paste('12\r\n')
writeLines('1', '2')
writeLines(c('1', '2'))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?tribble
?tibble
interpretation = tibble(`Number of People Receiving Food` = c("Number of People Receiving Food Every Day increases during 2005 and 2017, which is attributable to UMD’s great work.",
"The growth slowed down during 2010 and 2013, which indicates that UMD is ending some people’s homelessness.",
"Number of People Receiving Every Day starts to decrease after 2017, which indicates that UMD has ended many people’s homelessness since 2017."),
`Food Pounds` = c("Food Pounds UMD Provided Every Day generally increase during 2006 and 2017.",
"Food Pounds UMD Provided Every Day decrease during 2011 and 2013, which indicates that UMD is ending some people’s homelessness.",
"Food Pounds UMD Provided Every Day decrease after 2017, which indicates that UMD has ended many people’s homelessness since 2017."),
`Clothing Items` = c("Clothing Items UMD Provided Every Day increase during 2002 and 2010.",
"Clothing Items UMD Provided Every Day is a convex function of Time during 2011 and 2015.",
"Clothing Items UMD Provided Every Day start to decrease after 2015, which indicates that UMD has ended many people’s homelessness since 2015"))
names(interpretation)
interpretation["Food Pounds"]
interpretation["Food Pounds"][1]
interpretation["Food Pounds"][1,]
runApp()
runApp()
runApp()
# ---Data Preprocessing---
# Load UMD data
# Select Date, Food.Provided.for and Food.Pounds columns.
umd_df = read.csv('~/Documents/GitHub/bios611-projects-fall-2019-Jianqiao-Wang/project_2/data/UMD_Services_Provided_20190719.tsv', sep = '\t', header = TRUE)
library(rsconnect)
rsconnect::setAccountInfo(name='jianqiao-wang', token='7B90FA1D472E3A74EC3A0910CB8479BC', secret='uytpHV4omooD/LurMPiKd6himQNoxc7Qd+jLt/2/')
rsconnect::deployApp('~/Documents/GitHub/bios611-projects-fall-2019-Jianqiao-Wang/project_2/app.R')
rsconnect::deployApp('~/Documents/GitHub/bios611-projects-fall-2019-Jianqiao-Wang/project_2/')
rsconnect::deployApp('~/Documents/GitHub/bios611-projects-fall-2019-Jianqiao-Wang/project_2/')
?source
rsconnect::deployApp('~/Documents/GitHub/bios611-projects-fall-2019-Jianqiao-Wang/project_2/')
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
